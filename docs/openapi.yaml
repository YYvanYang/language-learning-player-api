# docs/openapi.yaml
openapi: 3.0.3
info:
  title: Language Learning Audio Player API
  description: API specification for the backend of the Language Learning Audio Player application. Provides endpoints for user authentication, audio content management, and user activity tracking.
  version: 1.0.0 # API Version (distinct from app version)
  contact:
    name: API Support Team
    email: support@example.com # Replace with actual contact
  license:
    name: Apache 2.0 # Or your chosen license
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080/api/v1 # Local development server base path
    description: Local Development Server
  - url: https://api.yourdomain.com/api/v1 # Production server base path (Replace!)
    description: Production Server

tags: # Group related endpoints
  - name: Authentication
    description: User registration, login, and third-party authentication.
  - name: User Activity
    description: Managing user playback progress and bookmarks.
  - name: Audio Tracks
    description: Accessing audio track metadata and playback URLs.
  - name: Audio Collections
    description: Managing user-created audio collections (playlists, courses).
  - name: Health
    description: API health checks.

paths:
  /healthz:
    get:
      tags:
        - Health
      summary: Check API Health
      description: Returns OK status if the API server is running. May include checks for database connectivity in the future.
      operationId: getHealthCheck
      responses:
        '200':
          description: API is healthy.
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '503':
          description: Service unavailable (e.g., cannot connect to database).
          $ref: '#/components/responses/ErrorResponse' # Reference shared error response

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Registers a new user account using email and password.
      operationId: registerUser
      requestBody:
        description: User registration details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO' # Reference DTO schema
      responses:
        '201':
          description: User registered successfully. Returns an authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '400':
          description: Invalid input data (e.g., invalid email format, weak password).
          $ref: '#/components/responses/ValidationErrorResponse'
        '409':
          description: Conflict - Email already exists.
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      description: Authenticates a user with email and password, returns a JWT token.
      operationId: loginUser
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: Login successful. Returns an authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '400':
          description: Invalid input data (e.g., missing fields).
          $ref: '#/components/responses/ValidationErrorResponse'
        '401':
          description: Authentication failed (invalid email or password).
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'

  /auth/google/callback:
    post:
      tags:
        - Authentication
      summary: Handle Google Sign-In callback
      description: Verifies a Google ID Token obtained by the client, logs in or registers the user, and returns an application JWT token.
      operationId: handleGoogleCallback
      requestBody:
        description: Google ID Token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCallbackRequestDTO'
      responses:
        '200':
          description: Google authentication successful. Returns an authentication token and optionally indicates if it was a new user registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO' # Includes optional isNewUser field
        '400':
          description: Invalid input (e.g., missing ID token).
          $ref: '#/components/responses/ValidationErrorResponse'
        '401':
          description: Authentication failed (invalid Google token).
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '409':
          description: Conflict - Email associated with Google account already exists with a different login method or different linked Google account.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ErrorResponseDTO' # Use standard error DTO
                 example:
                   code: "EMAIL_EXISTS"
                   message: "Email is already registered with a different method."
                   requestId: "req_123abc"
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'

  /users/me:
    get:
      tags:
        - User Activity # Or a dedicated "User Profile" tag
      summary: Get current user profile
      description: Retrieves the profile information for the currently authenticated user.
      operationId: getCurrentUserProfile
      security:
        - BearerAuth: [] # Indicates this endpoint requires Bearer token authentication
      responses:
        '200':
          description: Successfully retrieved user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO' # Define this DTO
        '401':
          description: Unauthorized - No or invalid token provided.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'
    # TODO: Add PUT /users/me endpoint description

  /users/me/progress:
    post:
      tags:
        - User Activity
      summary: Record playback progress
      description: Records or updates the listening progress for a specific track for the current user.
      operationId: recordUserProgress
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordProgressRequestDTO'
      responses:
        '204':
          description: Progress successfully recorded/updated. No content returned.
        '400':
          description: Invalid input data (e.g., invalid track ID, negative progress).
          $ref: '#/components/responses/ValidationErrorResponse'
        '401':
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
          description: Track not found.
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - User Activity
      summary: List user playback progress
      description: Retrieves a paginated list of all playback progress records for the current user, ordered by last listened time.
      operationId: listUserProgress
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: A paginated list of playback progress records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProgressResponseDTO'
        '401':
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'

  /users/me/progress/{trackId}:
    get:
      tags:
        - User Activity
      summary: Get progress for a specific track
      description: Retrieves the playback progress for a specific track for the current user.
      operationId: getUserTrackProgress
      security:
        - BearerAuth: []
      parameters:
        - name: trackId
          in: path
          required: true
          description: The UUID of the audio track.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Playback progress found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaybackProgressResponseDTO'
        '401':
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
          description: Progress record not found for this user and track (or track itself not found).
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'


  /bookmarks:
    post:
      tags:
        - User Activity
      summary: Create a bookmark
      description: Creates a new bookmark at a specific timestamp in an audio track for the current user.
      operationId: createBookmark
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookmarkRequestDTO'
      responses:
        '201':
          description: Bookmark created successfully. Returns the created bookmark details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkResponseDTO'
        '400':
          description: Invalid input data.
          $ref: '#/components/responses/ValidationErrorResponse'
        '401':
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
          description: Track not found.
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - User Activity
      summary: List user bookmarks
      description: Retrieves a paginated list of bookmarks for the current user, optionally filtered by track ID. Ordered by creation date descending.
      operationId: listUserBookmarks
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: trackId
          in: query
          required: false
          description: Filter bookmarks by a specific track UUID.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A paginated list of bookmarks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarksResponseDTO'
        '401':
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'

  /bookmarks/{bookmarkId}:
    delete:
      tags:
        - User Activity
      summary: Delete a bookmark
      description: Deletes a specific bookmark owned by the current user.
      operationId: deleteBookmark
      security:
        - BearerAuth: []
      parameters:
        - name: bookmarkId
          in: path
          required: true
          description: The UUID of the bookmark to delete.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Bookmark deleted successfully. No content returned.
        '401':
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          description: Forbidden - User does not own this bookmark.
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          description: Bookmark not found.
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'


  /audio/tracks:
    get:
      tags:
        - Audio Tracks
      summary: List audio tracks
      description: Retrieves a list of audio tracks, supports filtering, sorting, and pagination. Primarily lists public tracks unless specific permissions grant access to private ones (handled by implementation).
      operationId: listAudioTracks
      # No security needed for basic public listing, but add BearerAuth if filtering/sorting requires auth
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: q
          in: query
          description: Search query string (searches title and description).
          required: false
          schema:
            type: string
        - name: lang
          in: query
          description: Filter by language code (e.g., 'en-US').
          required: false
          schema:
            type: string
        - name: level
          in: query
          description: Filter by difficulty level (e.g., 'A1', 'B2', 'NATIVE').
          required: false
          schema:
            type: string
            enum: [A1, A2, B1, B2, C1, C2, NATIVE] # Reference domain.AudioLevel
        - name: isPublic
          in: query
          description: Filter by public visibility (true or false).
          required: false
          schema:
            type: boolean
        - name: tags
          in: query
          description: Filter by tags (provide multiple times, e.g., ?tags=news&tags=easy). Matches tracks containing ALL specified tags (or adjust logic/repo query for ANY).
          required: false
          style: form # How array parameters are formatted
          explode: true # Use separate parameters for each value (?tags=a&tags=b)
          schema:
            type: array
            items:
              type: string
        - name: sortBy
          in: query
          description: Field to sort by (e.g., 'createdAt', 'title', 'duration', 'level').
          required: false
          schema:
            type: string
            enum: [createdAt, title, duration, level] # Whitelist sortable fields
        - name: sortDir
          in: query
          description: Sort direction ('asc' or 'desc'). Default is 'desc' for 'createdAt', 'asc' otherwise? (Define default behavior).
          required: false
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: A paginated list of audio tracks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTracksResponseDTO'
        '400':
          description: Invalid query parameter value (e.g., invalid level, invalid boolean for isPublic).
          $ref: '#/components/responses/ValidationErrorResponse'
        '500':
          description: Internal server error.
          $ref: '#/components/responses/ErrorResponse'

  /audio/tracks/{trackId}:
    get:
      tags:
        - Audio Tracks
      summary: Get audio track details
      description: Retrieves details for a specific audio track, including metadata and a temporary playback URL. Access to private tracks requires authentication.
      operationId: getAudioTrackDetails
      # Add security if private tracks exist and require auth to view *any* detail
      # security:
      #  - BearerAuth: [] # Optional based on whether private tracks return 401/403 or just exclude playUrl
      parameters:
        - name: trackId
          in: path
          required: true
          description: The UUID of the audio track.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Audio track details found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTrackDetailsResponseDTO'
        '404':
          description: Audio track not found.
          $ref: '#/components/responses/NotFoundErrorResponse'
        '401': # If security is applied and token is invalid for private track access
          description: Unauthorized.
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403': # If security is applied and user doesn't have permission for private track
          description: Forbidden.
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '500':
          description: Internal server error (e.g., failed to generate presigned URL).
          $ref: '#/components/responses/ErrorResponse'

  # --- TODO: Add paths for Audio Collections ---
  # POST /audio/collections
  # GET /audio/collections/{collectionId}
  # PUT /audio/collections/{collectionId}
  # DELETE /audio/collections/{collectionId}
  # PUT /audio/collections/{collectionId}/tracks

components:
  schemas:
    # --- Request DTOs ---
    RegisterRequestDTO:
      type: object
      required: [email, password, name]
      properties:
        email:
          type: string
          format: email
          description: User's email address. Must be unique.
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          description: User's password (at least 8 characters).
          example: Str0ngP@ssw0rd
        name:
          type: string
          maxLength: 100
          description: User's display name.
          example: John Doe
    LoginRequestDTO:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: Str0ngP@ssw0rd
    GoogleCallbackRequestDTO:
      type: object
      required: [idToken]
      properties:
        idToken:
          type: string
          description: The Google ID Token obtained from the client-side Google Sign-In flow.
          example: "eyJhbGciOiJSUzI1NiIsImtpZCI6I..."
    RecordProgressRequestDTO:
      type: object
      required: [trackId, progressSeconds]
      properties:
        trackId:
          type: string
          format: uuid
          description: The UUID of the audio track.
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        progressSeconds:
          type: number
          format: double
          minimum: 0
          description: The playback progress in seconds.
          example: 123.45
    CreateBookmarkRequestDTO:
      type: object
      required: [trackId, timestampSeconds]
      properties:
        trackId:
          type: string
          format: uuid
          description: The UUID of the audio track.
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        timestampSeconds:
          type: number
          format: double
          minimum: 0
          description: The timestamp in the audio track (in seconds) where the bookmark is placed.
          example: 65.0
        note:
          type: string
          description: An optional note associated with the bookmark.
          example: "Remember this vocabulary."
    CreateCollectionRequestDTO:
      # TODO: Define schema based on DTO
      type: object
      # ...
    UpdateCollectionRequestDTO:
      # TODO: Define schema based on DTO
      type: object
      # ...
    UpdateCollectionTracksRequestDTO:
      # TODO: Define schema based on DTO
      type: object
      # ...

    # --- Response DTOs ---
    AuthResponseDTO:
      type: object
      required: [token]
      properties:
        token:
          type: string
          description: The JWT authentication token for subsequent API requests.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        isNewUser:
          type: boolean
          description: Included and set to true only if the authentication resulted in a new user account being created (typically via third-party login like Google).
          example: true
    UserResponseDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        authProvider:
          type: string
          enum: [local, google] # Reference domain.AuthProvider
          example: "local"
        profileImageUrl:
          type: string
          format: url
          nullable: true
          example: "https://lh3.googleusercontent.com/a-/..."
        createdAt:
          type: string
          format: date-time # RFC3339 format
          example: "2023-10-27T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-10-27T10:05:00Z"
    PlaybackProgressResponseDTO:
      type: object
      properties:
         userId:
           type: string
           format: uuid
         trackId:
           type: string
           format: uuid
         progressSeconds:
           type: number
           format: double
         lastListenedAt:
           type: string
           format: date-time
    BookmarkResponseDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
           type: string
           format: uuid
        trackId:
           type: string
           format: uuid
        timestampSeconds:
           type: number
           format: double
        note:
          type: string
          nullable: true
        createdAt:
           type: string
           format: date-time
    AudioTrackResponseDTO:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        languageCode: { type: string }
        level: { type: string, enum: [A1, A2, B1, B2, C1, C2, NATIVE] }
        durationMs: { type: integer, format: int64 }
        coverImageUrl: { type: string, format: url, nullable: true }
        uploaderId: { type: string, format: uuid, nullable: true }
        isPublic: { type: boolean }
        tags: { type: array, items: { type: string } }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    AudioTrackDetailsResponseDTO:
      allOf: # Combine Track DTO with playUrl
        - $ref: '#/components/schemas/AudioTrackResponseDTO'
        - type: object
          properties:
            playUrl:
              type: string
              format: url
              description: A temporary, pre-signed URL to stream the audio content. Valid for a limited time.
    AudioCollectionResponseDTO:
      # TODO: Define schema based on DTO
      type: object
      # ...
    PaginatedProgressResponseDTO:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PlaybackProgressResponseDTO'
        total: { type: integer, format: int32 }
        limit: { type: integer, format: int32 }
        offset: { type: integer, format: int32 }
    PaginatedBookmarksResponseDTO:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BookmarkResponseDTO'
        total: { type: integer, format: int32 }
        limit: { type: integer, format: int32 }
        offset: { type: integer, format: int32 }
    PaginatedTracksResponseDTO:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AudioTrackResponseDTO'
        total: { type: integer, format: int32 }
        limit: { type: integer, format: int32 }
        offset: { type: integer, format: int32 }
    PaginatedCollectionsResponseDTO:
      # TODO: Define schema
      type: object
      # ...
    ErrorResponseDTO:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: An application-specific error code.
          example: "INVALID_INPUT"
        message:
          type: string
          description: A human-readable error message.
          example: "Field 'email' failed validation on the 'required' rule"
        requestId:
          type: string
          description: The unique ID of the request, useful for tracing logs.
          example: "req_zX8f..."

  parameters:
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return per page.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100 # Set a reasonable max limit
        default: 20
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip for pagination.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0

  responses: # Define reusable responses
    ErrorResponse:
      description: Generic error response. Status code will vary (e.g., 500).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
    ValidationErrorResponse:
      description: Invalid input provided by the client.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
            example:
              code: "INVALID_INPUT"
              message: "validation failed: Field 'email' failed validation on the 'required' rule"
              requestId: "req_123abc"
    UnauthorizedErrorResponse:
      description: Authentication failed or is required. Missing or invalid credentials (e.g., JWT).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
            example:
              code: "UNAUTHENTICATED"
              message: "Authentication required. Please log in."
              requestId: "req_123abc"
    ForbiddenErrorResponse:
      description: The authenticated user does not have permission to perform the requested action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
            example:
              code: "FORBIDDEN"
              message: "You do not have permission to perform this action."
              requestId: "req_123abc"
    NotFoundErrorResponse:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
            example:
              code: "NOT_FOUND"
              message: "The requested resource was not found."
              requestId: "req_123abc"
    ConflictErrorResponse:
      description: The request could not be completed due to a conflict with the current state of the resource (e.g., resource already exists).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseDTO'
            example:
              code: "RESOURCE_CONFLICT"
              message: "Email already exists."
              requestId: "req_123abc"

  securitySchemes:
    BearerAuth: # Define the security scheme used
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, just documentation
      description: "Enter JWT Bearer token **_only_**"