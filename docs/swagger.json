{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/audio/tracks/{trackId}": {
            "get": {
                "description": "Retrieves details for a specific audio track, including metadata and a temporary playback URL.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audio Tracks"
                ],
                "summary": "Get audio track details",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Audio Track UUID",
                        "name": "trackId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audio track details found",
                        "schema": {
                            "$ref": "#/definitions/dto.AudioTrackDetailsResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid Track ID Format",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Track Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password, returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful, returns JWT",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "401": {
                        "description": "Authentication Failed",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user account using email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Info",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful, returns JWT\" // Success response: code, type, description",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid Input\"                // Failure response: code, type, description",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "409": {
                        "description": "Conflict - Email Exists",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/bookmarks/{bookmarkId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth // Apply the security definition defined in main.go": []
                    }
                ],
                "description": "Deletes a specific bookmark owned by the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Activity"
                ],
                "summary": "Delete a bookmark",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Bookmark UUID",
                        "name": "bookmarkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Bookmark deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not Owner)",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Bookmark Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponseDTO"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AudioTrackDetailsResponseDTO": {
            "type": "object",
            "properties": {
                "coverImageUrl": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "Use time.Time, will marshal to RFC3339",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "durationMs": {
                    "description": "Use int64 for milliseconds",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "languageCode": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "playUrl": {
                    "description": "Presigned URL",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uploaderId": {
                    "description": "Use string UUID",
                    "type": "string"
                }
            }
        },
        "dto.AuthResponseDTO": {
            "type": "object",
            "properties": {
                "isNewUser": {
                    "description": "Pointer, only included for Google callback if user is new",
                    "type": "boolean"
                },
                "token": {
                    "description": "The JWT access token",
                    "type": "string"
                }
            }
        },
        "dto.LoginRequestDTO": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterRequestDTO": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Add example tag",
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "John Doe"
                },
                "password": {
                    "description": "Add format tag",
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "example": "Str0ngP@ssw0rd"
                }
            }
        },
        "httputil.ErrorResponseDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Application-specific error code (e.g., \"INVALID_INPUT\", \"NOT_FOUND\")",
                    "type": "string"
                },
                "message": {
                    "description": "User-friendly error message",
                    "type": "string"
                },
                "requestId": {
                    "description": "Include request ID for tracing",
                    "type": "string"
                }
            }
        }
    }
}