// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/internal/port"
	"github.com/yvanyang/language-learning-player-api/pkg/pagination"
)

// NewMockUserActivityUseCase creates a new instance of MockUserActivityUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserActivityUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserActivityUseCase {
	mock := &MockUserActivityUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserActivityUseCase is an autogenerated mock type for the UserActivityUseCase type
type MockUserActivityUseCase struct {
	mock.Mock
}

type MockUserActivityUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserActivityUseCase) EXPECT() *MockUserActivityUseCase_Expecter {
	return &MockUserActivityUseCase_Expecter{mock: &_m.Mock}
}

// CreateBookmark provides a mock function for the type MockUserActivityUseCase
func (_mock *MockUserActivityUseCase) CreateBookmark(ctx context.Context, userID domain.UserID, trackID domain.TrackID, timestamp time.Duration, note string) (*domain.Bookmark, error) {
	ret := _mock.Called(ctx, userID, trackID, timestamp, note)

	if len(ret) == 0 {
		panic("no return value specified for CreateBookmark")
	}

	var r0 *domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID, time.Duration, string) (*domain.Bookmark, error)); ok {
		return returnFunc(ctx, userID, trackID, timestamp, note)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID, time.Duration, string) *domain.Bookmark); ok {
		r0 = returnFunc(ctx, userID, trackID, timestamp, note)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, domain.TrackID, time.Duration, string) error); ok {
		r1 = returnFunc(ctx, userID, trackID, timestamp, note)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserActivityUseCase_CreateBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBookmark'
type MockUserActivityUseCase_CreateBookmark_Call struct {
	*mock.Call
}

// CreateBookmark is a helper method to define mock.On call
//   - ctx
//   - userID
//   - trackID
//   - timestamp
//   - note
func (_e *MockUserActivityUseCase_Expecter) CreateBookmark(ctx interface{}, userID interface{}, trackID interface{}, timestamp interface{}, note interface{}) *MockUserActivityUseCase_CreateBookmark_Call {
	return &MockUserActivityUseCase_CreateBookmark_Call{Call: _e.mock.On("CreateBookmark", ctx, userID, trackID, timestamp, note)}
}

func (_c *MockUserActivityUseCase_CreateBookmark_Call) Run(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID, timestamp time.Duration, note string)) *MockUserActivityUseCase_CreateBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.TrackID), args[3].(time.Duration), args[4].(string))
	})
	return _c
}

func (_c *MockUserActivityUseCase_CreateBookmark_Call) Return(bookmark *domain.Bookmark, err error) *MockUserActivityUseCase_CreateBookmark_Call {
	_c.Call.Return(bookmark, err)
	return _c
}

func (_c *MockUserActivityUseCase_CreateBookmark_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID, timestamp time.Duration, note string) (*domain.Bookmark, error)) *MockUserActivityUseCase_CreateBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBookmark provides a mock function for the type MockUserActivityUseCase
func (_mock *MockUserActivityUseCase) DeleteBookmark(ctx context.Context, userID domain.UserID, bookmarkID domain.BookmarkID) error {
	ret := _mock.Called(ctx, userID, bookmarkID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBookmark")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.BookmarkID) error); ok {
		r0 = returnFunc(ctx, userID, bookmarkID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserActivityUseCase_DeleteBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBookmark'
type MockUserActivityUseCase_DeleteBookmark_Call struct {
	*mock.Call
}

// DeleteBookmark is a helper method to define mock.On call
//   - ctx
//   - userID
//   - bookmarkID
func (_e *MockUserActivityUseCase_Expecter) DeleteBookmark(ctx interface{}, userID interface{}, bookmarkID interface{}) *MockUserActivityUseCase_DeleteBookmark_Call {
	return &MockUserActivityUseCase_DeleteBookmark_Call{Call: _e.mock.On("DeleteBookmark", ctx, userID, bookmarkID)}
}

func (_c *MockUserActivityUseCase_DeleteBookmark_Call) Run(run func(ctx context.Context, userID domain.UserID, bookmarkID domain.BookmarkID)) *MockUserActivityUseCase_DeleteBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.BookmarkID))
	})
	return _c
}

func (_c *MockUserActivityUseCase_DeleteBookmark_Call) Return(err error) *MockUserActivityUseCase_DeleteBookmark_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserActivityUseCase_DeleteBookmark_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, bookmarkID domain.BookmarkID) error) *MockUserActivityUseCase_DeleteBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlaybackProgress provides a mock function for the type MockUserActivityUseCase
func (_mock *MockUserActivityUseCase) GetPlaybackProgress(ctx context.Context, userID domain.UserID, trackID domain.TrackID) (*domain.PlaybackProgress, error) {
	ret := _mock.Called(ctx, userID, trackID)

	if len(ret) == 0 {
		panic("no return value specified for GetPlaybackProgress")
	}

	var r0 *domain.PlaybackProgress
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID) (*domain.PlaybackProgress, error)); ok {
		return returnFunc(ctx, userID, trackID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID) *domain.PlaybackProgress); ok {
		r0 = returnFunc(ctx, userID, trackID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PlaybackProgress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, domain.TrackID) error); ok {
		r1 = returnFunc(ctx, userID, trackID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserActivityUseCase_GetPlaybackProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaybackProgress'
type MockUserActivityUseCase_GetPlaybackProgress_Call struct {
	*mock.Call
}

// GetPlaybackProgress is a helper method to define mock.On call
//   - ctx
//   - userID
//   - trackID
func (_e *MockUserActivityUseCase_Expecter) GetPlaybackProgress(ctx interface{}, userID interface{}, trackID interface{}) *MockUserActivityUseCase_GetPlaybackProgress_Call {
	return &MockUserActivityUseCase_GetPlaybackProgress_Call{Call: _e.mock.On("GetPlaybackProgress", ctx, userID, trackID)}
}

func (_c *MockUserActivityUseCase_GetPlaybackProgress_Call) Run(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID)) *MockUserActivityUseCase_GetPlaybackProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.TrackID))
	})
	return _c
}

func (_c *MockUserActivityUseCase_GetPlaybackProgress_Call) Return(playbackProgress *domain.PlaybackProgress, err error) *MockUserActivityUseCase_GetPlaybackProgress_Call {
	_c.Call.Return(playbackProgress, err)
	return _c
}

func (_c *MockUserActivityUseCase_GetPlaybackProgress_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID) (*domain.PlaybackProgress, error)) *MockUserActivityUseCase_GetPlaybackProgress_Call {
	_c.Call.Return(run)
	return _c
}

// ListBookmarks provides a mock function for the type MockUserActivityUseCase
func (_mock *MockUserActivityUseCase) ListBookmarks(ctx context.Context, params port.ListBookmarksInput) ([]*domain.Bookmark, int, pagination.Page, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListBookmarks")
	}

	var r0 []*domain.Bookmark
	var r1 int
	var r2 pagination.Page
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListBookmarksInput) ([]*domain.Bookmark, int, pagination.Page, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListBookmarksInput) []*domain.Bookmark); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, port.ListBookmarksInput) int); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, port.ListBookmarksInput) pagination.Page); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Get(2).(pagination.Page)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, port.ListBookmarksInput) error); ok {
		r3 = returnFunc(ctx, params)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockUserActivityUseCase_ListBookmarks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBookmarks'
type MockUserActivityUseCase_ListBookmarks_Call struct {
	*mock.Call
}

// ListBookmarks is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockUserActivityUseCase_Expecter) ListBookmarks(ctx interface{}, params interface{}) *MockUserActivityUseCase_ListBookmarks_Call {
	return &MockUserActivityUseCase_ListBookmarks_Call{Call: _e.mock.On("ListBookmarks", ctx, params)}
}

func (_c *MockUserActivityUseCase_ListBookmarks_Call) Run(run func(ctx context.Context, params port.ListBookmarksInput)) *MockUserActivityUseCase_ListBookmarks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(port.ListBookmarksInput))
	})
	return _c
}

func (_c *MockUserActivityUseCase_ListBookmarks_Call) Return(bookmarks []*domain.Bookmark, n int, page pagination.Page, err error) *MockUserActivityUseCase_ListBookmarks_Call {
	_c.Call.Return(bookmarks, n, page, err)
	return _c
}

func (_c *MockUserActivityUseCase_ListBookmarks_Call) RunAndReturn(run func(ctx context.Context, params port.ListBookmarksInput) ([]*domain.Bookmark, int, pagination.Page, error)) *MockUserActivityUseCase_ListBookmarks_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserProgress provides a mock function for the type MockUserActivityUseCase
func (_mock *MockUserActivityUseCase) ListUserProgress(ctx context.Context, params port.ListProgressInput) ([]*domain.PlaybackProgress, int, pagination.Page, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListUserProgress")
	}

	var r0 []*domain.PlaybackProgress
	var r1 int
	var r2 pagination.Page
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListProgressInput) ([]*domain.PlaybackProgress, int, pagination.Page, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListProgressInput) []*domain.PlaybackProgress); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PlaybackProgress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, port.ListProgressInput) int); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, port.ListProgressInput) pagination.Page); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Get(2).(pagination.Page)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, port.ListProgressInput) error); ok {
		r3 = returnFunc(ctx, params)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockUserActivityUseCase_ListUserProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserProgress'
type MockUserActivityUseCase_ListUserProgress_Call struct {
	*mock.Call
}

// ListUserProgress is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockUserActivityUseCase_Expecter) ListUserProgress(ctx interface{}, params interface{}) *MockUserActivityUseCase_ListUserProgress_Call {
	return &MockUserActivityUseCase_ListUserProgress_Call{Call: _e.mock.On("ListUserProgress", ctx, params)}
}

func (_c *MockUserActivityUseCase_ListUserProgress_Call) Run(run func(ctx context.Context, params port.ListProgressInput)) *MockUserActivityUseCase_ListUserProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(port.ListProgressInput))
	})
	return _c
}

func (_c *MockUserActivityUseCase_ListUserProgress_Call) Return(playbackProgresss []*domain.PlaybackProgress, n int, page pagination.Page, err error) *MockUserActivityUseCase_ListUserProgress_Call {
	_c.Call.Return(playbackProgresss, n, page, err)
	return _c
}

func (_c *MockUserActivityUseCase_ListUserProgress_Call) RunAndReturn(run func(ctx context.Context, params port.ListProgressInput) ([]*domain.PlaybackProgress, int, pagination.Page, error)) *MockUserActivityUseCase_ListUserProgress_Call {
	_c.Call.Return(run)
	return _c
}

// RecordPlaybackProgress provides a mock function for the type MockUserActivityUseCase
func (_mock *MockUserActivityUseCase) RecordPlaybackProgress(ctx context.Context, userID domain.UserID, trackID domain.TrackID, progress time.Duration) error {
	ret := _mock.Called(ctx, userID, trackID, progress)

	if len(ret) == 0 {
		panic("no return value specified for RecordPlaybackProgress")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID, time.Duration) error); ok {
		r0 = returnFunc(ctx, userID, trackID, progress)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserActivityUseCase_RecordPlaybackProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordPlaybackProgress'
type MockUserActivityUseCase_RecordPlaybackProgress_Call struct {
	*mock.Call
}

// RecordPlaybackProgress is a helper method to define mock.On call
//   - ctx
//   - userID
//   - trackID
//   - progress
func (_e *MockUserActivityUseCase_Expecter) RecordPlaybackProgress(ctx interface{}, userID interface{}, trackID interface{}, progress interface{}) *MockUserActivityUseCase_RecordPlaybackProgress_Call {
	return &MockUserActivityUseCase_RecordPlaybackProgress_Call{Call: _e.mock.On("RecordPlaybackProgress", ctx, userID, trackID, progress)}
}

func (_c *MockUserActivityUseCase_RecordPlaybackProgress_Call) Run(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID, progress time.Duration)) *MockUserActivityUseCase_RecordPlaybackProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.TrackID), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUserActivityUseCase_RecordPlaybackProgress_Call) Return(err error) *MockUserActivityUseCase_RecordPlaybackProgress_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserActivityUseCase_RecordPlaybackProgress_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID, progress time.Duration) error) *MockUserActivityUseCase_RecordPlaybackProgress_Call {
	_c.Call.Return(run)
	return _c
}
