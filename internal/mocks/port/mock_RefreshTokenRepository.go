// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/internal/port"
)

// NewMockRefreshTokenRepository creates a new instance of MockRefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRefreshTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRefreshTokenRepository is an autogenerated mock type for the RefreshTokenRepository type
type MockRefreshTokenRepository struct {
	mock.Mock
}

type MockRefreshTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepository_Expecter {
	return &MockRefreshTokenRepository_Expecter{mock: &_m.Mock}
}

// DeleteByTokenHash provides a mock function for the type MockRefreshTokenRepository
func (_mock *MockRefreshTokenRepository) DeleteByTokenHash(ctx context.Context, tokenHash string) error {
	ret := _mock.Called(ctx, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTokenHash")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, tokenHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRefreshTokenRepository_DeleteByTokenHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByTokenHash'
type MockRefreshTokenRepository_DeleteByTokenHash_Call struct {
	*mock.Call
}

// DeleteByTokenHash is a helper method to define mock.On call
//   - ctx
//   - tokenHash
func (_e *MockRefreshTokenRepository_Expecter) DeleteByTokenHash(ctx interface{}, tokenHash interface{}) *MockRefreshTokenRepository_DeleteByTokenHash_Call {
	return &MockRefreshTokenRepository_DeleteByTokenHash_Call{Call: _e.mock.On("DeleteByTokenHash", ctx, tokenHash)}
}

func (_c *MockRefreshTokenRepository_DeleteByTokenHash_Call) Run(run func(ctx context.Context, tokenHash string)) *MockRefreshTokenRepository_DeleteByTokenHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRefreshTokenRepository_DeleteByTokenHash_Call) Return(err error) *MockRefreshTokenRepository_DeleteByTokenHash_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRefreshTokenRepository_DeleteByTokenHash_Call) RunAndReturn(run func(ctx context.Context, tokenHash string) error) *MockRefreshTokenRepository_DeleteByTokenHash_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUser provides a mock function for the type MockRefreshTokenRepository
func (_mock *MockRefreshTokenRepository) DeleteByUser(ctx context.Context, userID domain.UserID) (int64, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUser")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) (int64, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) int64); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRefreshTokenRepository_DeleteByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUser'
type MockRefreshTokenRepository_DeleteByUser_Call struct {
	*mock.Call
}

// DeleteByUser is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockRefreshTokenRepository_Expecter) DeleteByUser(ctx interface{}, userID interface{}) *MockRefreshTokenRepository_DeleteByUser_Call {
	return &MockRefreshTokenRepository_DeleteByUser_Call{Call: _e.mock.On("DeleteByUser", ctx, userID)}
}

func (_c *MockRefreshTokenRepository_DeleteByUser_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockRefreshTokenRepository_DeleteByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockRefreshTokenRepository_DeleteByUser_Call) Return(n int64, err error) *MockRefreshTokenRepository_DeleteByUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRefreshTokenRepository_DeleteByUser_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID) (int64, error)) *MockRefreshTokenRepository_DeleteByUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTokenHash provides a mock function for the type MockRefreshTokenRepository
func (_mock *MockRefreshTokenRepository) FindByTokenHash(ctx context.Context, tokenHash string) (*port.RefreshTokenData, error) {
	ret := _mock.Called(ctx, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for FindByTokenHash")
	}

	var r0 *port.RefreshTokenData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*port.RefreshTokenData, error)); ok {
		return returnFunc(ctx, tokenHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *port.RefreshTokenData); ok {
		r0 = returnFunc(ctx, tokenHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.RefreshTokenData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, tokenHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRefreshTokenRepository_FindByTokenHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTokenHash'
type MockRefreshTokenRepository_FindByTokenHash_Call struct {
	*mock.Call
}

// FindByTokenHash is a helper method to define mock.On call
//   - ctx
//   - tokenHash
func (_e *MockRefreshTokenRepository_Expecter) FindByTokenHash(ctx interface{}, tokenHash interface{}) *MockRefreshTokenRepository_FindByTokenHash_Call {
	return &MockRefreshTokenRepository_FindByTokenHash_Call{Call: _e.mock.On("FindByTokenHash", ctx, tokenHash)}
}

func (_c *MockRefreshTokenRepository_FindByTokenHash_Call) Run(run func(ctx context.Context, tokenHash string)) *MockRefreshTokenRepository_FindByTokenHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRefreshTokenRepository_FindByTokenHash_Call) Return(refreshTokenData *port.RefreshTokenData, err error) *MockRefreshTokenRepository_FindByTokenHash_Call {
	_c.Call.Return(refreshTokenData, err)
	return _c
}

func (_c *MockRefreshTokenRepository_FindByTokenHash_Call) RunAndReturn(run func(ctx context.Context, tokenHash string) (*port.RefreshTokenData, error)) *MockRefreshTokenRepository_FindByTokenHash_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockRefreshTokenRepository
func (_mock *MockRefreshTokenRepository) Save(ctx context.Context, tokenData *port.RefreshTokenData) error {
	ret := _mock.Called(ctx, tokenData)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *port.RefreshTokenData) error); ok {
		r0 = returnFunc(ctx, tokenData)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRefreshTokenRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRefreshTokenRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
//   - tokenData
func (_e *MockRefreshTokenRepository_Expecter) Save(ctx interface{}, tokenData interface{}) *MockRefreshTokenRepository_Save_Call {
	return &MockRefreshTokenRepository_Save_Call{Call: _e.mock.On("Save", ctx, tokenData)}
}

func (_c *MockRefreshTokenRepository_Save_Call) Run(run func(ctx context.Context, tokenData *port.RefreshTokenData)) *MockRefreshTokenRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*port.RefreshTokenData))
	})
	return _c
}

func (_c *MockRefreshTokenRepository_Save_Call) Return(err error) *MockRefreshTokenRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRefreshTokenRepository_Save_Call) RunAndReturn(run func(ctx context.Context, tokenData *port.RefreshTokenData) error) *MockRefreshTokenRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
