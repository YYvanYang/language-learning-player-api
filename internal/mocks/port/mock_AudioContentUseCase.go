// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/internal/port"
	"github.com/yvanyang/language-learning-player-api/pkg/pagination"
)

// NewMockAudioContentUseCase creates a new instance of MockAudioContentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioContentUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioContentUseCase {
	mock := &MockAudioContentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAudioContentUseCase is an autogenerated mock type for the AudioContentUseCase type
type MockAudioContentUseCase struct {
	mock.Mock
}

type MockAudioContentUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioContentUseCase) EXPECT() *MockAudioContentUseCase_Expecter {
	return &MockAudioContentUseCase_Expecter{mock: &_m.Mock}
}

// CreateCollection provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) CreateCollection(ctx context.Context, title string, description string, colType domain.CollectionType, initialTrackIDs []domain.TrackID) (*domain.AudioCollection, error) {
	ret := _mock.Called(ctx, title, description, colType, initialTrackIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 *domain.AudioCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.CollectionType, []domain.TrackID) (*domain.AudioCollection, error)); ok {
		return returnFunc(ctx, title, description, colType, initialTrackIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.CollectionType, []domain.TrackID) *domain.AudioCollection); ok {
		r0 = returnFunc(ctx, title, description, colType, initialTrackIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AudioCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, domain.CollectionType, []domain.TrackID) error); ok {
		r1 = returnFunc(ctx, title, description, colType, initialTrackIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioContentUseCase_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockAudioContentUseCase_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx
//   - title
//   - description
//   - colType
//   - initialTrackIDs
func (_e *MockAudioContentUseCase_Expecter) CreateCollection(ctx interface{}, title interface{}, description interface{}, colType interface{}, initialTrackIDs interface{}) *MockAudioContentUseCase_CreateCollection_Call {
	return &MockAudioContentUseCase_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, title, description, colType, initialTrackIDs)}
}

func (_c *MockAudioContentUseCase_CreateCollection_Call) Run(run func(ctx context.Context, title string, description string, colType domain.CollectionType, initialTrackIDs []domain.TrackID)) *MockAudioContentUseCase_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(domain.CollectionType), args[4].([]domain.TrackID))
	})
	return _c
}

func (_c *MockAudioContentUseCase_CreateCollection_Call) Return(audioCollection *domain.AudioCollection, err error) *MockAudioContentUseCase_CreateCollection_Call {
	_c.Call.Return(audioCollection, err)
	return _c
}

func (_c *MockAudioContentUseCase_CreateCollection_Call) RunAndReturn(run func(ctx context.Context, title string, description string, colType domain.CollectionType, initialTrackIDs []domain.TrackID) (*domain.AudioCollection, error)) *MockAudioContentUseCase_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) DeleteCollection(ctx context.Context, collectionID domain.CollectionID) error {
	ret := _mock.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) error); ok {
		r0 = returnFunc(ctx, collectionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioContentUseCase_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type MockAudioContentUseCase_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx
//   - collectionID
func (_e *MockAudioContentUseCase_Expecter) DeleteCollection(ctx interface{}, collectionID interface{}) *MockAudioContentUseCase_DeleteCollection_Call {
	return &MockAudioContentUseCase_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, collectionID)}
}

func (_c *MockAudioContentUseCase_DeleteCollection_Call) Run(run func(ctx context.Context, collectionID domain.CollectionID)) *MockAudioContentUseCase_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID))
	})
	return _c
}

func (_c *MockAudioContentUseCase_DeleteCollection_Call) Return(err error) *MockAudioContentUseCase_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioContentUseCase_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, collectionID domain.CollectionID) error) *MockAudioContentUseCase_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetAudioTrackDetails provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) GetAudioTrackDetails(ctx context.Context, trackID domain.TrackID) (*port.GetAudioTrackDetailsResult, error) {
	ret := _mock.Called(ctx, trackID)

	if len(ret) == 0 {
		panic("no return value specified for GetAudioTrackDetails")
	}

	var r0 *port.GetAudioTrackDetailsResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) (*port.GetAudioTrackDetailsResult, error)); ok {
		return returnFunc(ctx, trackID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) *port.GetAudioTrackDetailsResult); ok {
		r0 = returnFunc(ctx, trackID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.GetAudioTrackDetailsResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TrackID) error); ok {
		r1 = returnFunc(ctx, trackID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioContentUseCase_GetAudioTrackDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAudioTrackDetails'
type MockAudioContentUseCase_GetAudioTrackDetails_Call struct {
	*mock.Call
}

// GetAudioTrackDetails is a helper method to define mock.On call
//   - ctx
//   - trackID
func (_e *MockAudioContentUseCase_Expecter) GetAudioTrackDetails(ctx interface{}, trackID interface{}) *MockAudioContentUseCase_GetAudioTrackDetails_Call {
	return &MockAudioContentUseCase_GetAudioTrackDetails_Call{Call: _e.mock.On("GetAudioTrackDetails", ctx, trackID)}
}

func (_c *MockAudioContentUseCase_GetAudioTrackDetails_Call) Run(run func(ctx context.Context, trackID domain.TrackID)) *MockAudioContentUseCase_GetAudioTrackDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TrackID))
	})
	return _c
}

func (_c *MockAudioContentUseCase_GetAudioTrackDetails_Call) Return(getAudioTrackDetailsResult *port.GetAudioTrackDetailsResult, err error) *MockAudioContentUseCase_GetAudioTrackDetails_Call {
	_c.Call.Return(getAudioTrackDetailsResult, err)
	return _c
}

func (_c *MockAudioContentUseCase_GetAudioTrackDetails_Call) RunAndReturn(run func(ctx context.Context, trackID domain.TrackID) (*port.GetAudioTrackDetailsResult, error)) *MockAudioContentUseCase_GetAudioTrackDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionDetails provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) GetCollectionDetails(ctx context.Context, collectionID domain.CollectionID) (*domain.AudioCollection, error) {
	ret := _mock.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionDetails")
	}

	var r0 *domain.AudioCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) (*domain.AudioCollection, error)); ok {
		return returnFunc(ctx, collectionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) *domain.AudioCollection); ok {
		r0 = returnFunc(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AudioCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CollectionID) error); ok {
		r1 = returnFunc(ctx, collectionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioContentUseCase_GetCollectionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionDetails'
type MockAudioContentUseCase_GetCollectionDetails_Call struct {
	*mock.Call
}

// GetCollectionDetails is a helper method to define mock.On call
//   - ctx
//   - collectionID
func (_e *MockAudioContentUseCase_Expecter) GetCollectionDetails(ctx interface{}, collectionID interface{}) *MockAudioContentUseCase_GetCollectionDetails_Call {
	return &MockAudioContentUseCase_GetCollectionDetails_Call{Call: _e.mock.On("GetCollectionDetails", ctx, collectionID)}
}

func (_c *MockAudioContentUseCase_GetCollectionDetails_Call) Run(run func(ctx context.Context, collectionID domain.CollectionID)) *MockAudioContentUseCase_GetCollectionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID))
	})
	return _c
}

func (_c *MockAudioContentUseCase_GetCollectionDetails_Call) Return(audioCollection *domain.AudioCollection, err error) *MockAudioContentUseCase_GetCollectionDetails_Call {
	_c.Call.Return(audioCollection, err)
	return _c
}

func (_c *MockAudioContentUseCase_GetCollectionDetails_Call) RunAndReturn(run func(ctx context.Context, collectionID domain.CollectionID) (*domain.AudioCollection, error)) *MockAudioContentUseCase_GetCollectionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionTracks provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) GetCollectionTracks(ctx context.Context, collectionID domain.CollectionID) ([]*domain.AudioTrack, error) {
	ret := _mock.Called(ctx, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionTracks")
	}

	var r0 []*domain.AudioTrack
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) ([]*domain.AudioTrack, error)); ok {
		return returnFunc(ctx, collectionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) []*domain.AudioTrack); ok {
		r0 = returnFunc(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AudioTrack)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CollectionID) error); ok {
		r1 = returnFunc(ctx, collectionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioContentUseCase_GetCollectionTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionTracks'
type MockAudioContentUseCase_GetCollectionTracks_Call struct {
	*mock.Call
}

// GetCollectionTracks is a helper method to define mock.On call
//   - ctx
//   - collectionID
func (_e *MockAudioContentUseCase_Expecter) GetCollectionTracks(ctx interface{}, collectionID interface{}) *MockAudioContentUseCase_GetCollectionTracks_Call {
	return &MockAudioContentUseCase_GetCollectionTracks_Call{Call: _e.mock.On("GetCollectionTracks", ctx, collectionID)}
}

func (_c *MockAudioContentUseCase_GetCollectionTracks_Call) Run(run func(ctx context.Context, collectionID domain.CollectionID)) *MockAudioContentUseCase_GetCollectionTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID))
	})
	return _c
}

func (_c *MockAudioContentUseCase_GetCollectionTracks_Call) Return(audioTracks []*domain.AudioTrack, err error) *MockAudioContentUseCase_GetCollectionTracks_Call {
	_c.Call.Return(audioTracks, err)
	return _c
}

func (_c *MockAudioContentUseCase_GetCollectionTracks_Call) RunAndReturn(run func(ctx context.Context, collectionID domain.CollectionID) ([]*domain.AudioTrack, error)) *MockAudioContentUseCase_GetCollectionTracks_Call {
	_c.Call.Return(run)
	return _c
}

// ListTracks provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) ListTracks(ctx context.Context, input port.ListTracksInput) ([]*domain.AudioTrack, int, pagination.Page, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListTracks")
	}

	var r0 []*domain.AudioTrack
	var r1 int
	var r2 pagination.Page
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListTracksInput) ([]*domain.AudioTrack, int, pagination.Page, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListTracksInput) []*domain.AudioTrack); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AudioTrack)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, port.ListTracksInput) int); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, port.ListTracksInput) pagination.Page); ok {
		r2 = returnFunc(ctx, input)
	} else {
		r2 = ret.Get(2).(pagination.Page)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, port.ListTracksInput) error); ok {
		r3 = returnFunc(ctx, input)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockAudioContentUseCase_ListTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTracks'
type MockAudioContentUseCase_ListTracks_Call struct {
	*mock.Call
}

// ListTracks is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockAudioContentUseCase_Expecter) ListTracks(ctx interface{}, input interface{}) *MockAudioContentUseCase_ListTracks_Call {
	return &MockAudioContentUseCase_ListTracks_Call{Call: _e.mock.On("ListTracks", ctx, input)}
}

func (_c *MockAudioContentUseCase_ListTracks_Call) Run(run func(ctx context.Context, input port.ListTracksInput)) *MockAudioContentUseCase_ListTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(port.ListTracksInput))
	})
	return _c
}

func (_c *MockAudioContentUseCase_ListTracks_Call) Return(audioTracks []*domain.AudioTrack, n int, page pagination.Page, err error) *MockAudioContentUseCase_ListTracks_Call {
	_c.Call.Return(audioTracks, n, page, err)
	return _c
}

func (_c *MockAudioContentUseCase_ListTracks_Call) RunAndReturn(run func(ctx context.Context, input port.ListTracksInput) ([]*domain.AudioTrack, int, pagination.Page, error)) *MockAudioContentUseCase_ListTracks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCollectionMetadata provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) UpdateCollectionMetadata(ctx context.Context, collectionID domain.CollectionID, title string, description string) error {
	ret := _mock.Called(ctx, collectionID, title, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollectionMetadata")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID, string, string) error); ok {
		r0 = returnFunc(ctx, collectionID, title, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioContentUseCase_UpdateCollectionMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCollectionMetadata'
type MockAudioContentUseCase_UpdateCollectionMetadata_Call struct {
	*mock.Call
}

// UpdateCollectionMetadata is a helper method to define mock.On call
//   - ctx
//   - collectionID
//   - title
//   - description
func (_e *MockAudioContentUseCase_Expecter) UpdateCollectionMetadata(ctx interface{}, collectionID interface{}, title interface{}, description interface{}) *MockAudioContentUseCase_UpdateCollectionMetadata_Call {
	return &MockAudioContentUseCase_UpdateCollectionMetadata_Call{Call: _e.mock.On("UpdateCollectionMetadata", ctx, collectionID, title, description)}
}

func (_c *MockAudioContentUseCase_UpdateCollectionMetadata_Call) Run(run func(ctx context.Context, collectionID domain.CollectionID, title string, description string)) *MockAudioContentUseCase_UpdateCollectionMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAudioContentUseCase_UpdateCollectionMetadata_Call) Return(err error) *MockAudioContentUseCase_UpdateCollectionMetadata_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioContentUseCase_UpdateCollectionMetadata_Call) RunAndReturn(run func(ctx context.Context, collectionID domain.CollectionID, title string, description string) error) *MockAudioContentUseCase_UpdateCollectionMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCollectionTracks provides a mock function for the type MockAudioContentUseCase
func (_mock *MockAudioContentUseCase) UpdateCollectionTracks(ctx context.Context, collectionID domain.CollectionID, orderedTrackIDs []domain.TrackID) error {
	ret := _mock.Called(ctx, collectionID, orderedTrackIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollectionTracks")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID, []domain.TrackID) error); ok {
		r0 = returnFunc(ctx, collectionID, orderedTrackIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioContentUseCase_UpdateCollectionTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCollectionTracks'
type MockAudioContentUseCase_UpdateCollectionTracks_Call struct {
	*mock.Call
}

// UpdateCollectionTracks is a helper method to define mock.On call
//   - ctx
//   - collectionID
//   - orderedTrackIDs
func (_e *MockAudioContentUseCase_Expecter) UpdateCollectionTracks(ctx interface{}, collectionID interface{}, orderedTrackIDs interface{}) *MockAudioContentUseCase_UpdateCollectionTracks_Call {
	return &MockAudioContentUseCase_UpdateCollectionTracks_Call{Call: _e.mock.On("UpdateCollectionTracks", ctx, collectionID, orderedTrackIDs)}
}

func (_c *MockAudioContentUseCase_UpdateCollectionTracks_Call) Run(run func(ctx context.Context, collectionID domain.CollectionID, orderedTrackIDs []domain.TrackID)) *MockAudioContentUseCase_UpdateCollectionTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID), args[2].([]domain.TrackID))
	})
	return _c
}

func (_c *MockAudioContentUseCase_UpdateCollectionTracks_Call) Return(err error) *MockAudioContentUseCase_UpdateCollectionTracks_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioContentUseCase_UpdateCollectionTracks_Call) RunAndReturn(run func(ctx context.Context, collectionID domain.CollectionID, orderedTrackIDs []domain.TrackID) error) *MockAudioContentUseCase_UpdateCollectionTracks_Call {
	_c.Call.Return(run)
	return _c
}
