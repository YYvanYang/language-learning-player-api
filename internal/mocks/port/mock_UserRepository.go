// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, user *domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, user interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(err error) *MockUserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) error) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// EmailExists provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) EmailExists(ctx context.Context, email domain.Email) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Email) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Email) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Email) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type MockUserRepository_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepository_Expecter) EmailExists(ctx interface{}, email interface{}) *MockUserRepository_EmailExists_Call {
	return &MockUserRepository_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, email)}
}

func (_c *MockUserRepository_EmailExists_Call) Run(run func(ctx context.Context, email domain.Email)) *MockUserRepository_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Email))
	})
	return _c
}

func (_c *MockUserRepository_EmailExists_Call) Return(b bool, err error) *MockUserRepository_EmailExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserRepository_EmailExists_Call) RunAndReturn(run func(ctx context.Context, email domain.Email) (bool, error)) *MockUserRepository_EmailExists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindByEmail(ctx context.Context, email domain.Email) (*domain.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Email) (*domain.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Email) *domain.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Email) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockUserRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepository_Expecter) FindByEmail(ctx interface{}, email interface{}) *MockUserRepository_FindByEmail_Call {
	return &MockUserRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *MockUserRepository_FindByEmail_Call) Run(run func(ctx context.Context, email domain.Email)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Email))
	})
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) Return(user *domain.User, err error) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) RunAndReturn(run func(ctx context.Context, email domain.Email) (*domain.User, error)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindByID(ctx context.Context, id domain.UserID) (*domain.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) (*domain.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) *domain.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockUserRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockUserRepository_FindByID_Call {
	return &MockUserRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockUserRepository_FindByID_Call) Run(run func(ctx context.Context, id domain.UserID)) *MockUserRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUserRepository_FindByID_Call) Return(user *domain.User, err error) *MockUserRepository_FindByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, id domain.UserID) (*domain.User, error)) *MockUserRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByProviderID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindByProviderID(ctx context.Context, provider domain.AuthProvider, providerUserID string) (*domain.User, error) {
	ret := _mock.Called(ctx, provider, providerUserID)

	if len(ret) == 0 {
		panic("no return value specified for FindByProviderID")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthProvider, string) (*domain.User, error)); ok {
		return returnFunc(ctx, provider, providerUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthProvider, string) *domain.User); ok {
		r0 = returnFunc(ctx, provider, providerUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthProvider, string) error); ok {
		r1 = returnFunc(ctx, provider, providerUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindByProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByProviderID'
type MockUserRepository_FindByProviderID_Call struct {
	*mock.Call
}

// FindByProviderID is a helper method to define mock.On call
//   - ctx
//   - provider
//   - providerUserID
func (_e *MockUserRepository_Expecter) FindByProviderID(ctx interface{}, provider interface{}, providerUserID interface{}) *MockUserRepository_FindByProviderID_Call {
	return &MockUserRepository_FindByProviderID_Call{Call: _e.mock.On("FindByProviderID", ctx, provider, providerUserID)}
}

func (_c *MockUserRepository_FindByProviderID_Call) Run(run func(ctx context.Context, provider domain.AuthProvider, providerUserID string)) *MockUserRepository_FindByProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.AuthProvider), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindByProviderID_Call) Return(user *domain.User, err error) *MockUserRepository_FindByProviderID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindByProviderID_Call) RunAndReturn(run func(ctx context.Context, provider domain.AuthProvider, providerUserID string) (*domain.User, error)) *MockUserRepository_FindByProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Update(ctx context.Context, user *domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) Update(ctx interface{}, user interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(err error) *MockUserRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
