// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/pkg/pagination"
)

// NewMockBookmarkRepository creates a new instance of MockBookmarkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookmarkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookmarkRepository {
	mock := &MockBookmarkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookmarkRepository is an autogenerated mock type for the BookmarkRepository type
type MockBookmarkRepository struct {
	mock.Mock
}

type MockBookmarkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookmarkRepository) EXPECT() *MockBookmarkRepository_Expecter {
	return &MockBookmarkRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockBookmarkRepository
func (_mock *MockBookmarkRepository) Create(ctx context.Context, bookmark *domain.Bookmark) error {
	ret := _mock.Called(ctx, bookmark)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Bookmark) error); ok {
		r0 = returnFunc(ctx, bookmark)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookmarkRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBookmarkRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - bookmark
func (_e *MockBookmarkRepository_Expecter) Create(ctx interface{}, bookmark interface{}) *MockBookmarkRepository_Create_Call {
	return &MockBookmarkRepository_Create_Call{Call: _e.mock.On("Create", ctx, bookmark)}
}

func (_c *MockBookmarkRepository_Create_Call) Run(run func(ctx context.Context, bookmark *domain.Bookmark)) *MockBookmarkRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bookmark))
	})
	return _c
}

func (_c *MockBookmarkRepository_Create_Call) Return(err error) *MockBookmarkRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookmarkRepository_Create_Call) RunAndReturn(run func(ctx context.Context, bookmark *domain.Bookmark) error) *MockBookmarkRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockBookmarkRepository
func (_mock *MockBookmarkRepository) Delete(ctx context.Context, id domain.BookmarkID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.BookmarkID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookmarkRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBookmarkRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockBookmarkRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockBookmarkRepository_Delete_Call {
	return &MockBookmarkRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBookmarkRepository_Delete_Call) Run(run func(ctx context.Context, id domain.BookmarkID)) *MockBookmarkRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.BookmarkID))
	})
	return _c
}

func (_c *MockBookmarkRepository_Delete_Call) Return(err error) *MockBookmarkRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookmarkRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.BookmarkID) error) *MockBookmarkRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockBookmarkRepository
func (_mock *MockBookmarkRepository) FindByID(ctx context.Context, id domain.BookmarkID) (*domain.Bookmark, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.BookmarkID) (*domain.Bookmark, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.BookmarkID) *domain.Bookmark); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.BookmarkID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockBookmarkRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockBookmarkRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockBookmarkRepository_FindByID_Call {
	return &MockBookmarkRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockBookmarkRepository_FindByID_Call) Run(run func(ctx context.Context, id domain.BookmarkID)) *MockBookmarkRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.BookmarkID))
	})
	return _c
}

func (_c *MockBookmarkRepository_FindByID_Call) Return(bookmark *domain.Bookmark, err error) *MockBookmarkRepository_FindByID_Call {
	_c.Call.Return(bookmark, err)
	return _c
}

func (_c *MockBookmarkRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, id domain.BookmarkID) (*domain.Bookmark, error)) *MockBookmarkRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function for the type MockBookmarkRepository
func (_mock *MockBookmarkRepository) ListByUser(ctx context.Context, userID domain.UserID, page pagination.Page) ([]*domain.Bookmark, int, error) {
	ret := _mock.Called(ctx, userID, page)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*domain.Bookmark
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, pagination.Page) ([]*domain.Bookmark, int, error)); ok {
		return returnFunc(ctx, userID, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, pagination.Page) []*domain.Bookmark); ok {
		r0 = returnFunc(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, pagination.Page) int); ok {
		r1 = returnFunc(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.UserID, pagination.Page) error); ok {
		r2 = returnFunc(ctx, userID, page)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBookmarkRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type MockBookmarkRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx
//   - userID
//   - page
func (_e *MockBookmarkRepository_Expecter) ListByUser(ctx interface{}, userID interface{}, page interface{}) *MockBookmarkRepository_ListByUser_Call {
	return &MockBookmarkRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID, page)}
}

func (_c *MockBookmarkRepository_ListByUser_Call) Run(run func(ctx context.Context, userID domain.UserID, page pagination.Page)) *MockBookmarkRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(pagination.Page))
	})
	return _c
}

func (_c *MockBookmarkRepository_ListByUser_Call) Return(bookmarks []*domain.Bookmark, total int, err error) *MockBookmarkRepository_ListByUser_Call {
	_c.Call.Return(bookmarks, total, err)
	return _c
}

func (_c *MockBookmarkRepository_ListByUser_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, page pagination.Page) ([]*domain.Bookmark, int, error)) *MockBookmarkRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserAndTrack provides a mock function for the type MockBookmarkRepository
func (_mock *MockBookmarkRepository) ListByUserAndTrack(ctx context.Context, userID domain.UserID, trackID domain.TrackID) ([]*domain.Bookmark, error) {
	ret := _mock.Called(ctx, userID, trackID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserAndTrack")
	}

	var r0 []*domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID) ([]*domain.Bookmark, error)); ok {
		return returnFunc(ctx, userID, trackID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID) []*domain.Bookmark); ok {
		r0 = returnFunc(ctx, userID, trackID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, domain.TrackID) error); ok {
		r1 = returnFunc(ctx, userID, trackID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkRepository_ListByUserAndTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserAndTrack'
type MockBookmarkRepository_ListByUserAndTrack_Call struct {
	*mock.Call
}

// ListByUserAndTrack is a helper method to define mock.On call
//   - ctx
//   - userID
//   - trackID
func (_e *MockBookmarkRepository_Expecter) ListByUserAndTrack(ctx interface{}, userID interface{}, trackID interface{}) *MockBookmarkRepository_ListByUserAndTrack_Call {
	return &MockBookmarkRepository_ListByUserAndTrack_Call{Call: _e.mock.On("ListByUserAndTrack", ctx, userID, trackID)}
}

func (_c *MockBookmarkRepository_ListByUserAndTrack_Call) Run(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID)) *MockBookmarkRepository_ListByUserAndTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.TrackID))
	})
	return _c
}

func (_c *MockBookmarkRepository_ListByUserAndTrack_Call) Return(bookmarks []*domain.Bookmark, err error) *MockBookmarkRepository_ListByUserAndTrack_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockBookmarkRepository_ListByUserAndTrack_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID) ([]*domain.Bookmark, error)) *MockBookmarkRepository_ListByUserAndTrack_Call {
	_c.Call.Return(run)
	return _c
}
