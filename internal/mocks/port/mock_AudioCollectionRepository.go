// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/pkg/pagination"
)

// NewMockAudioCollectionRepository creates a new instance of MockAudioCollectionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioCollectionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioCollectionRepository {
	mock := &MockAudioCollectionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAudioCollectionRepository is an autogenerated mock type for the AudioCollectionRepository type
type MockAudioCollectionRepository struct {
	mock.Mock
}

type MockAudioCollectionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioCollectionRepository) EXPECT() *MockAudioCollectionRepository_Expecter {
	return &MockAudioCollectionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) Create(ctx context.Context, collection *domain.AudioCollection) error {
	ret := _mock.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.AudioCollection) error); ok {
		r0 = returnFunc(ctx, collection)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioCollectionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAudioCollectionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - collection
func (_e *MockAudioCollectionRepository_Expecter) Create(ctx interface{}, collection interface{}) *MockAudioCollectionRepository_Create_Call {
	return &MockAudioCollectionRepository_Create_Call{Call: _e.mock.On("Create", ctx, collection)}
}

func (_c *MockAudioCollectionRepository_Create_Call) Run(run func(ctx context.Context, collection *domain.AudioCollection)) *MockAudioCollectionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.AudioCollection))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_Create_Call) Return(err error) *MockAudioCollectionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioCollectionRepository_Create_Call) RunAndReturn(run func(ctx context.Context, collection *domain.AudioCollection) error) *MockAudioCollectionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) Delete(ctx context.Context, id domain.CollectionID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioCollectionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAudioCollectionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAudioCollectionRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockAudioCollectionRepository_Delete_Call {
	return &MockAudioCollectionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAudioCollectionRepository_Delete_Call) Run(run func(ctx context.Context, id domain.CollectionID)) *MockAudioCollectionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_Delete_Call) Return(err error) *MockAudioCollectionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioCollectionRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.CollectionID) error) *MockAudioCollectionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) FindByID(ctx context.Context, id domain.CollectionID) (*domain.AudioCollection, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.AudioCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) (*domain.AudioCollection, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) *domain.AudioCollection); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AudioCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CollectionID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioCollectionRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockAudioCollectionRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAudioCollectionRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockAudioCollectionRepository_FindByID_Call {
	return &MockAudioCollectionRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockAudioCollectionRepository_FindByID_Call) Run(run func(ctx context.Context, id domain.CollectionID)) *MockAudioCollectionRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_FindByID_Call) Return(audioCollection *domain.AudioCollection, err error) *MockAudioCollectionRepository_FindByID_Call {
	_c.Call.Return(audioCollection, err)
	return _c
}

func (_c *MockAudioCollectionRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, id domain.CollectionID) (*domain.AudioCollection, error)) *MockAudioCollectionRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindWithTracks provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) FindWithTracks(ctx context.Context, id domain.CollectionID) (*domain.AudioCollection, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindWithTracks")
	}

	var r0 *domain.AudioCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) (*domain.AudioCollection, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID) *domain.AudioCollection); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AudioCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CollectionID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioCollectionRepository_FindWithTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWithTracks'
type MockAudioCollectionRepository_FindWithTracks_Call struct {
	*mock.Call
}

// FindWithTracks is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAudioCollectionRepository_Expecter) FindWithTracks(ctx interface{}, id interface{}) *MockAudioCollectionRepository_FindWithTracks_Call {
	return &MockAudioCollectionRepository_FindWithTracks_Call{Call: _e.mock.On("FindWithTracks", ctx, id)}
}

func (_c *MockAudioCollectionRepository_FindWithTracks_Call) Run(run func(ctx context.Context, id domain.CollectionID)) *MockAudioCollectionRepository_FindWithTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_FindWithTracks_Call) Return(audioCollection *domain.AudioCollection, err error) *MockAudioCollectionRepository_FindWithTracks_Call {
	_c.Call.Return(audioCollection, err)
	return _c
}

func (_c *MockAudioCollectionRepository_FindWithTracks_Call) RunAndReturn(run func(ctx context.Context, id domain.CollectionID) (*domain.AudioCollection, error)) *MockAudioCollectionRepository_FindWithTracks_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOwner provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) ListByOwner(ctx context.Context, ownerID domain.UserID, page pagination.Page) ([]*domain.AudioCollection, int, error) {
	ret := _mock.Called(ctx, ownerID, page)

	if len(ret) == 0 {
		panic("no return value specified for ListByOwner")
	}

	var r0 []*domain.AudioCollection
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, pagination.Page) ([]*domain.AudioCollection, int, error)); ok {
		return returnFunc(ctx, ownerID, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, pagination.Page) []*domain.AudioCollection); ok {
		r0 = returnFunc(ctx, ownerID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AudioCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, pagination.Page) int); ok {
		r1 = returnFunc(ctx, ownerID, page)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.UserID, pagination.Page) error); ok {
		r2 = returnFunc(ctx, ownerID, page)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAudioCollectionRepository_ListByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOwner'
type MockAudioCollectionRepository_ListByOwner_Call struct {
	*mock.Call
}

// ListByOwner is a helper method to define mock.On call
//   - ctx
//   - ownerID
//   - page
func (_e *MockAudioCollectionRepository_Expecter) ListByOwner(ctx interface{}, ownerID interface{}, page interface{}) *MockAudioCollectionRepository_ListByOwner_Call {
	return &MockAudioCollectionRepository_ListByOwner_Call{Call: _e.mock.On("ListByOwner", ctx, ownerID, page)}
}

func (_c *MockAudioCollectionRepository_ListByOwner_Call) Run(run func(ctx context.Context, ownerID domain.UserID, page pagination.Page)) *MockAudioCollectionRepository_ListByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(pagination.Page))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_ListByOwner_Call) Return(collections []*domain.AudioCollection, total int, err error) *MockAudioCollectionRepository_ListByOwner_Call {
	_c.Call.Return(collections, total, err)
	return _c
}

func (_c *MockAudioCollectionRepository_ListByOwner_Call) RunAndReturn(run func(ctx context.Context, ownerID domain.UserID, page pagination.Page) ([]*domain.AudioCollection, int, error)) *MockAudioCollectionRepository_ListByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// ManageTracks provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) ManageTracks(ctx context.Context, collectionID domain.CollectionID, orderedTrackIDs []domain.TrackID) error {
	ret := _mock.Called(ctx, collectionID, orderedTrackIDs)

	if len(ret) == 0 {
		panic("no return value specified for ManageTracks")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CollectionID, []domain.TrackID) error); ok {
		r0 = returnFunc(ctx, collectionID, orderedTrackIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioCollectionRepository_ManageTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManageTracks'
type MockAudioCollectionRepository_ManageTracks_Call struct {
	*mock.Call
}

// ManageTracks is a helper method to define mock.On call
//   - ctx
//   - collectionID
//   - orderedTrackIDs
func (_e *MockAudioCollectionRepository_Expecter) ManageTracks(ctx interface{}, collectionID interface{}, orderedTrackIDs interface{}) *MockAudioCollectionRepository_ManageTracks_Call {
	return &MockAudioCollectionRepository_ManageTracks_Call{Call: _e.mock.On("ManageTracks", ctx, collectionID, orderedTrackIDs)}
}

func (_c *MockAudioCollectionRepository_ManageTracks_Call) Run(run func(ctx context.Context, collectionID domain.CollectionID, orderedTrackIDs []domain.TrackID)) *MockAudioCollectionRepository_ManageTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CollectionID), args[2].([]domain.TrackID))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_ManageTracks_Call) Return(err error) *MockAudioCollectionRepository_ManageTracks_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioCollectionRepository_ManageTracks_Call) RunAndReturn(run func(ctx context.Context, collectionID domain.CollectionID, orderedTrackIDs []domain.TrackID) error) *MockAudioCollectionRepository_ManageTracks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetadata provides a mock function for the type MockAudioCollectionRepository
func (_mock *MockAudioCollectionRepository) UpdateMetadata(ctx context.Context, collection *domain.AudioCollection) error {
	ret := _mock.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadata")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.AudioCollection) error); ok {
		r0 = returnFunc(ctx, collection)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioCollectionRepository_UpdateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetadata'
type MockAudioCollectionRepository_UpdateMetadata_Call struct {
	*mock.Call
}

// UpdateMetadata is a helper method to define mock.On call
//   - ctx
//   - collection
func (_e *MockAudioCollectionRepository_Expecter) UpdateMetadata(ctx interface{}, collection interface{}) *MockAudioCollectionRepository_UpdateMetadata_Call {
	return &MockAudioCollectionRepository_UpdateMetadata_Call{Call: _e.mock.On("UpdateMetadata", ctx, collection)}
}

func (_c *MockAudioCollectionRepository_UpdateMetadata_Call) Run(run func(ctx context.Context, collection *domain.AudioCollection)) *MockAudioCollectionRepository_UpdateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.AudioCollection))
	})
	return _c
}

func (_c *MockAudioCollectionRepository_UpdateMetadata_Call) Return(err error) *MockAudioCollectionRepository_UpdateMetadata_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioCollectionRepository_UpdateMetadata_Call) RunAndReturn(run func(ctx context.Context, collection *domain.AudioCollection) error) *MockAudioCollectionRepository_UpdateMetadata_Call {
	_c.Call.Return(run)
	return _c
}
