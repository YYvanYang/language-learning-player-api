// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/internal/port"
	"github.com/yvanyang/language-learning-player-api/pkg/pagination"
)

// NewMockAudioTrackRepository creates a new instance of MockAudioTrackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioTrackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioTrackRepository {
	mock := &MockAudioTrackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAudioTrackRepository is an autogenerated mock type for the AudioTrackRepository type
type MockAudioTrackRepository struct {
	mock.Mock
}

type MockAudioTrackRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioTrackRepository) EXPECT() *MockAudioTrackRepository_Expecter {
	return &MockAudioTrackRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) Create(ctx context.Context, track *domain.AudioTrack) error {
	ret := _mock.Called(ctx, track)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.AudioTrack) error); ok {
		r0 = returnFunc(ctx, track)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioTrackRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAudioTrackRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - track
func (_e *MockAudioTrackRepository_Expecter) Create(ctx interface{}, track interface{}) *MockAudioTrackRepository_Create_Call {
	return &MockAudioTrackRepository_Create_Call{Call: _e.mock.On("Create", ctx, track)}
}

func (_c *MockAudioTrackRepository_Create_Call) Run(run func(ctx context.Context, track *domain.AudioTrack)) *MockAudioTrackRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.AudioTrack))
	})
	return _c
}

func (_c *MockAudioTrackRepository_Create_Call) Return(err error) *MockAudioTrackRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioTrackRepository_Create_Call) RunAndReturn(run func(ctx context.Context, track *domain.AudioTrack) error) *MockAudioTrackRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) Delete(ctx context.Context, id domain.TrackID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioTrackRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAudioTrackRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAudioTrackRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockAudioTrackRepository_Delete_Call {
	return &MockAudioTrackRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAudioTrackRepository_Delete_Call) Run(run func(ctx context.Context, id domain.TrackID)) *MockAudioTrackRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TrackID))
	})
	return _c
}

func (_c *MockAudioTrackRepository_Delete_Call) Return(err error) *MockAudioTrackRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioTrackRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id domain.TrackID) error) *MockAudioTrackRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) Exists(ctx context.Context, id domain.TrackID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TrackID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioTrackRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockAudioTrackRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAudioTrackRepository_Expecter) Exists(ctx interface{}, id interface{}) *MockAudioTrackRepository_Exists_Call {
	return &MockAudioTrackRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockAudioTrackRepository_Exists_Call) Run(run func(ctx context.Context, id domain.TrackID)) *MockAudioTrackRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TrackID))
	})
	return _c
}

func (_c *MockAudioTrackRepository_Exists_Call) Return(b bool, err error) *MockAudioTrackRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAudioTrackRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, id domain.TrackID) (bool, error)) *MockAudioTrackRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) FindByID(ctx context.Context, id domain.TrackID) (*domain.AudioTrack, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.AudioTrack
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) (*domain.AudioTrack, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TrackID) *domain.AudioTrack); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AudioTrack)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TrackID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioTrackRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockAudioTrackRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAudioTrackRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockAudioTrackRepository_FindByID_Call {
	return &MockAudioTrackRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockAudioTrackRepository_FindByID_Call) Run(run func(ctx context.Context, id domain.TrackID)) *MockAudioTrackRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TrackID))
	})
	return _c
}

func (_c *MockAudioTrackRepository_FindByID_Call) Return(audioTrack *domain.AudioTrack, err error) *MockAudioTrackRepository_FindByID_Call {
	_c.Call.Return(audioTrack, err)
	return _c
}

func (_c *MockAudioTrackRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, id domain.TrackID) (*domain.AudioTrack, error)) *MockAudioTrackRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) List(ctx context.Context, filters port.ListTracksFilters, page pagination.Page) ([]*domain.AudioTrack, int, error) {
	ret := _mock.Called(ctx, filters, page)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.AudioTrack
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListTracksFilters, pagination.Page) ([]*domain.AudioTrack, int, error)); ok {
		return returnFunc(ctx, filters, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, port.ListTracksFilters, pagination.Page) []*domain.AudioTrack); ok {
		r0 = returnFunc(ctx, filters, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AudioTrack)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, port.ListTracksFilters, pagination.Page) int); ok {
		r1 = returnFunc(ctx, filters, page)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, port.ListTracksFilters, pagination.Page) error); ok {
		r2 = returnFunc(ctx, filters, page)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAudioTrackRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAudioTrackRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - filters
//   - page
func (_e *MockAudioTrackRepository_Expecter) List(ctx interface{}, filters interface{}, page interface{}) *MockAudioTrackRepository_List_Call {
	return &MockAudioTrackRepository_List_Call{Call: _e.mock.On("List", ctx, filters, page)}
}

func (_c *MockAudioTrackRepository_List_Call) Run(run func(ctx context.Context, filters port.ListTracksFilters, page pagination.Page)) *MockAudioTrackRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(port.ListTracksFilters), args[2].(pagination.Page))
	})
	return _c
}

func (_c *MockAudioTrackRepository_List_Call) Return(tracks []*domain.AudioTrack, total int, err error) *MockAudioTrackRepository_List_Call {
	_c.Call.Return(tracks, total, err)
	return _c
}

func (_c *MockAudioTrackRepository_List_Call) RunAndReturn(run func(ctx context.Context, filters port.ListTracksFilters, page pagination.Page) ([]*domain.AudioTrack, int, error)) *MockAudioTrackRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByIDs provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) ListByIDs(ctx context.Context, ids []domain.TrackID) ([]*domain.AudioTrack, error) {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for ListByIDs")
	}

	var r0 []*domain.AudioTrack
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.TrackID) ([]*domain.AudioTrack, error)); ok {
		return returnFunc(ctx, ids)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.TrackID) []*domain.AudioTrack); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.AudioTrack)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.TrackID) error); ok {
		r1 = returnFunc(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioTrackRepository_ListByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByIDs'
type MockAudioTrackRepository_ListByIDs_Call struct {
	*mock.Call
}

// ListByIDs is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockAudioTrackRepository_Expecter) ListByIDs(ctx interface{}, ids interface{}) *MockAudioTrackRepository_ListByIDs_Call {
	return &MockAudioTrackRepository_ListByIDs_Call{Call: _e.mock.On("ListByIDs", ctx, ids)}
}

func (_c *MockAudioTrackRepository_ListByIDs_Call) Run(run func(ctx context.Context, ids []domain.TrackID)) *MockAudioTrackRepository_ListByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.TrackID))
	})
	return _c
}

func (_c *MockAudioTrackRepository_ListByIDs_Call) Return(audioTracks []*domain.AudioTrack, err error) *MockAudioTrackRepository_ListByIDs_Call {
	_c.Call.Return(audioTracks, err)
	return _c
}

func (_c *MockAudioTrackRepository_ListByIDs_Call) RunAndReturn(run func(ctx context.Context, ids []domain.TrackID) ([]*domain.AudioTrack, error)) *MockAudioTrackRepository_ListByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAudioTrackRepository
func (_mock *MockAudioTrackRepository) Update(ctx context.Context, track *domain.AudioTrack) error {
	ret := _mock.Called(ctx, track)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.AudioTrack) error); ok {
		r0 = returnFunc(ctx, track)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioTrackRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAudioTrackRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - track
func (_e *MockAudioTrackRepository_Expecter) Update(ctx interface{}, track interface{}) *MockAudioTrackRepository_Update_Call {
	return &MockAudioTrackRepository_Update_Call{Call: _e.mock.On("Update", ctx, track)}
}

func (_c *MockAudioTrackRepository_Update_Call) Run(run func(ctx context.Context, track *domain.AudioTrack)) *MockAudioTrackRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.AudioTrack))
	})
	return _c
}

func (_c *MockAudioTrackRepository_Update_Call) Return(err error) *MockAudioTrackRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioTrackRepository_Update_Call) RunAndReturn(run func(ctx context.Context, track *domain.AudioTrack) error) *MockAudioTrackRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
