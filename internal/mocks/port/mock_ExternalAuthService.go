// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/port"
)

// NewMockExternalAuthService creates a new instance of MockExternalAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExternalAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExternalAuthService {
	mock := &MockExternalAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExternalAuthService is an autogenerated mock type for the ExternalAuthService type
type MockExternalAuthService struct {
	mock.Mock
}

type MockExternalAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExternalAuthService) EXPECT() *MockExternalAuthService_Expecter {
	return &MockExternalAuthService_Expecter{mock: &_m.Mock}
}

// VerifyGoogleToken provides a mock function for the type MockExternalAuthService
func (_mock *MockExternalAuthService) VerifyGoogleToken(ctx context.Context, idToken string) (*port.ExternalUserInfo, error) {
	ret := _mock.Called(ctx, idToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyGoogleToken")
	}

	var r0 *port.ExternalUserInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*port.ExternalUserInfo, error)); ok {
		return returnFunc(ctx, idToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *port.ExternalUserInfo); ok {
		r0 = returnFunc(ctx, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*port.ExternalUserInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, idToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExternalAuthService_VerifyGoogleToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyGoogleToken'
type MockExternalAuthService_VerifyGoogleToken_Call struct {
	*mock.Call
}

// VerifyGoogleToken is a helper method to define mock.On call
//   - ctx
//   - idToken
func (_e *MockExternalAuthService_Expecter) VerifyGoogleToken(ctx interface{}, idToken interface{}) *MockExternalAuthService_VerifyGoogleToken_Call {
	return &MockExternalAuthService_VerifyGoogleToken_Call{Call: _e.mock.On("VerifyGoogleToken", ctx, idToken)}
}

func (_c *MockExternalAuthService_VerifyGoogleToken_Call) Run(run func(ctx context.Context, idToken string)) *MockExternalAuthService_VerifyGoogleToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExternalAuthService_VerifyGoogleToken_Call) Return(externalUserInfo *port.ExternalUserInfo, err error) *MockExternalAuthService_VerifyGoogleToken_Call {
	_c.Call.Return(externalUserInfo, err)
	return _c
}

func (_c *MockExternalAuthService_VerifyGoogleToken_Call) RunAndReturn(run func(ctx context.Context, idToken string) (*port.ExternalUserInfo, error)) *MockExternalAuthService_VerifyGoogleToken_Call {
	_c.Call.Return(run)
	return _c
}
