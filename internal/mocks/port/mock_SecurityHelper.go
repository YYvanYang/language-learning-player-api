// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
)

// NewMockSecurityHelper creates a new instance of MockSecurityHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityHelper {
	mock := &MockSecurityHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecurityHelper is an autogenerated mock type for the SecurityHelper type
type MockSecurityHelper struct {
	mock.Mock
}

type MockSecurityHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityHelper) EXPECT() *MockSecurityHelper_Expecter {
	return &MockSecurityHelper_Expecter{mock: &_m.Mock}
}

// CheckPasswordHash provides a mock function for the type MockSecurityHelper
func (_mock *MockSecurityHelper) CheckPasswordHash(ctx context.Context, password string, hash string) bool {
	ret := _mock.Called(ctx, password, hash)

	if len(ret) == 0 {
		panic("no return value specified for CheckPasswordHash")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockSecurityHelper_CheckPasswordHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPasswordHash'
type MockSecurityHelper_CheckPasswordHash_Call struct {
	*mock.Call
}

// CheckPasswordHash is a helper method to define mock.On call
//   - ctx
//   - password
//   - hash
func (_e *MockSecurityHelper_Expecter) CheckPasswordHash(ctx interface{}, password interface{}, hash interface{}) *MockSecurityHelper_CheckPasswordHash_Call {
	return &MockSecurityHelper_CheckPasswordHash_Call{Call: _e.mock.On("CheckPasswordHash", ctx, password, hash)}
}

func (_c *MockSecurityHelper_CheckPasswordHash_Call) Run(run func(ctx context.Context, password string, hash string)) *MockSecurityHelper_CheckPasswordHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSecurityHelper_CheckPasswordHash_Call) Return(b bool) *MockSecurityHelper_CheckPasswordHash_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockSecurityHelper_CheckPasswordHash_Call) RunAndReturn(run func(ctx context.Context, password string, hash string) bool) *MockSecurityHelper_CheckPasswordHash_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateJWT provides a mock function for the type MockSecurityHelper
func (_mock *MockSecurityHelper) GenerateJWT(ctx context.Context, userID domain.UserID, duration time.Duration) (string, error) {
	ret := _mock.Called(ctx, userID, duration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, time.Duration) (string, error)); ok {
		return returnFunc(ctx, userID, duration)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, time.Duration) string); ok {
		r0 = returnFunc(ctx, userID, duration)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, time.Duration) error); ok {
		r1 = returnFunc(ctx, userID, duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityHelper_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type MockSecurityHelper_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - ctx
//   - userID
//   - duration
func (_e *MockSecurityHelper_Expecter) GenerateJWT(ctx interface{}, userID interface{}, duration interface{}) *MockSecurityHelper_GenerateJWT_Call {
	return &MockSecurityHelper_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", ctx, userID, duration)}
}

func (_c *MockSecurityHelper_GenerateJWT_Call) Run(run func(ctx context.Context, userID domain.UserID, duration time.Duration)) *MockSecurityHelper_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockSecurityHelper_GenerateJWT_Call) Return(s string, err error) *MockSecurityHelper_GenerateJWT_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSecurityHelper_GenerateJWT_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, duration time.Duration) (string, error)) *MockSecurityHelper_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshTokenValue provides a mock function for the type MockSecurityHelper
func (_mock *MockSecurityHelper) GenerateRefreshTokenValue() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshTokenValue")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityHelper_GenerateRefreshTokenValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshTokenValue'
type MockSecurityHelper_GenerateRefreshTokenValue_Call struct {
	*mock.Call
}

// GenerateRefreshTokenValue is a helper method to define mock.On call
func (_e *MockSecurityHelper_Expecter) GenerateRefreshTokenValue() *MockSecurityHelper_GenerateRefreshTokenValue_Call {
	return &MockSecurityHelper_GenerateRefreshTokenValue_Call{Call: _e.mock.On("GenerateRefreshTokenValue")}
}

func (_c *MockSecurityHelper_GenerateRefreshTokenValue_Call) Run(run func()) *MockSecurityHelper_GenerateRefreshTokenValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecurityHelper_GenerateRefreshTokenValue_Call) Return(s string, err error) *MockSecurityHelper_GenerateRefreshTokenValue_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSecurityHelper_GenerateRefreshTokenValue_Call) RunAndReturn(run func() (string, error)) *MockSecurityHelper_GenerateRefreshTokenValue_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function for the type MockSecurityHelper
func (_mock *MockSecurityHelper) HashPassword(ctx context.Context, password string) (string, error) {
	ret := _mock.Called(ctx, password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityHelper_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockSecurityHelper_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - ctx
//   - password
func (_e *MockSecurityHelper_Expecter) HashPassword(ctx interface{}, password interface{}) *MockSecurityHelper_HashPassword_Call {
	return &MockSecurityHelper_HashPassword_Call{Call: _e.mock.On("HashPassword", ctx, password)}
}

func (_c *MockSecurityHelper_HashPassword_Call) Run(run func(ctx context.Context, password string)) *MockSecurityHelper_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecurityHelper_HashPassword_Call) Return(s string, err error) *MockSecurityHelper_HashPassword_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSecurityHelper_HashPassword_Call) RunAndReturn(run func(ctx context.Context, password string) (string, error)) *MockSecurityHelper_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HashRefreshTokenValue provides a mock function for the type MockSecurityHelper
func (_mock *MockSecurityHelper) HashRefreshTokenValue(tokenValue string) string {
	ret := _mock.Called(tokenValue)

	if len(ret) == 0 {
		panic("no return value specified for HashRefreshTokenValue")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(tokenValue)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSecurityHelper_HashRefreshTokenValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashRefreshTokenValue'
type MockSecurityHelper_HashRefreshTokenValue_Call struct {
	*mock.Call
}

// HashRefreshTokenValue is a helper method to define mock.On call
//   - tokenValue
func (_e *MockSecurityHelper_Expecter) HashRefreshTokenValue(tokenValue interface{}) *MockSecurityHelper_HashRefreshTokenValue_Call {
	return &MockSecurityHelper_HashRefreshTokenValue_Call{Call: _e.mock.On("HashRefreshTokenValue", tokenValue)}
}

func (_c *MockSecurityHelper_HashRefreshTokenValue_Call) Run(run func(tokenValue string)) *MockSecurityHelper_HashRefreshTokenValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecurityHelper_HashRefreshTokenValue_Call) Return(s string) *MockSecurityHelper_HashRefreshTokenValue_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSecurityHelper_HashRefreshTokenValue_Call) RunAndReturn(run func(tokenValue string) string) *MockSecurityHelper_HashRefreshTokenValue_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWT provides a mock function for the type MockSecurityHelper
func (_mock *MockSecurityHelper) VerifyJWT(ctx context.Context, tokenString string) (domain.UserID, error) {
	ret := _mock.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWT")
	}

	var r0 domain.UserID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.UserID, error)); ok {
		return returnFunc(ctx, tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.UserID); ok {
		r0 = returnFunc(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.UserID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityHelper_VerifyJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWT'
type MockSecurityHelper_VerifyJWT_Call struct {
	*mock.Call
}

// VerifyJWT is a helper method to define mock.On call
//   - ctx
//   - tokenString
func (_e *MockSecurityHelper_Expecter) VerifyJWT(ctx interface{}, tokenString interface{}) *MockSecurityHelper_VerifyJWT_Call {
	return &MockSecurityHelper_VerifyJWT_Call{Call: _e.mock.On("VerifyJWT", ctx, tokenString)}
}

func (_c *MockSecurityHelper_VerifyJWT_Call) Run(run func(ctx context.Context, tokenString string)) *MockSecurityHelper_VerifyJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecurityHelper_VerifyJWT_Call) Return(userID domain.UserID, err error) *MockSecurityHelper_VerifyJWT_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *MockSecurityHelper_VerifyJWT_Call) RunAndReturn(run func(ctx context.Context, tokenString string) (domain.UserID, error)) *MockSecurityHelper_VerifyJWT_Call {
	_c.Call.Return(run)
	return _c
}
