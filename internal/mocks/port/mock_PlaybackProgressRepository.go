// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
	"github.com/yvanyang/language-learning-player-api/pkg/pagination"
)

// NewMockPlaybackProgressRepository creates a new instance of MockPlaybackProgressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlaybackProgressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlaybackProgressRepository {
	mock := &MockPlaybackProgressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlaybackProgressRepository is an autogenerated mock type for the PlaybackProgressRepository type
type MockPlaybackProgressRepository struct {
	mock.Mock
}

type MockPlaybackProgressRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlaybackProgressRepository) EXPECT() *MockPlaybackProgressRepository_Expecter {
	return &MockPlaybackProgressRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockPlaybackProgressRepository
func (_mock *MockPlaybackProgressRepository) Find(ctx context.Context, userID domain.UserID, trackID domain.TrackID) (*domain.PlaybackProgress, error) {
	ret := _mock.Called(ctx, userID, trackID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.PlaybackProgress
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID) (*domain.PlaybackProgress, error)); ok {
		return returnFunc(ctx, userID, trackID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.TrackID) *domain.PlaybackProgress); ok {
		r0 = returnFunc(ctx, userID, trackID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PlaybackProgress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, domain.TrackID) error); ok {
		r1 = returnFunc(ctx, userID, trackID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlaybackProgressRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockPlaybackProgressRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx
//   - userID
//   - trackID
func (_e *MockPlaybackProgressRepository_Expecter) Find(ctx interface{}, userID interface{}, trackID interface{}) *MockPlaybackProgressRepository_Find_Call {
	return &MockPlaybackProgressRepository_Find_Call{Call: _e.mock.On("Find", ctx, userID, trackID)}
}

func (_c *MockPlaybackProgressRepository_Find_Call) Run(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID)) *MockPlaybackProgressRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(domain.TrackID))
	})
	return _c
}

func (_c *MockPlaybackProgressRepository_Find_Call) Return(playbackProgress *domain.PlaybackProgress, err error) *MockPlaybackProgressRepository_Find_Call {
	_c.Call.Return(playbackProgress, err)
	return _c
}

func (_c *MockPlaybackProgressRepository_Find_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, trackID domain.TrackID) (*domain.PlaybackProgress, error)) *MockPlaybackProgressRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function for the type MockPlaybackProgressRepository
func (_mock *MockPlaybackProgressRepository) ListByUser(ctx context.Context, userID domain.UserID, page pagination.Page) ([]*domain.PlaybackProgress, int, error) {
	ret := _mock.Called(ctx, userID, page)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*domain.PlaybackProgress
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, pagination.Page) ([]*domain.PlaybackProgress, int, error)); ok {
		return returnFunc(ctx, userID, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, pagination.Page) []*domain.PlaybackProgress); ok {
		r0 = returnFunc(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PlaybackProgress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, pagination.Page) int); ok {
		r1 = returnFunc(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, domain.UserID, pagination.Page) error); ok {
		r2 = returnFunc(ctx, userID, page)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPlaybackProgressRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type MockPlaybackProgressRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx
//   - userID
//   - page
func (_e *MockPlaybackProgressRepository_Expecter) ListByUser(ctx interface{}, userID interface{}, page interface{}) *MockPlaybackProgressRepository_ListByUser_Call {
	return &MockPlaybackProgressRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID, page)}
}

func (_c *MockPlaybackProgressRepository_ListByUser_Call) Run(run func(ctx context.Context, userID domain.UserID, page pagination.Page)) *MockPlaybackProgressRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID), args[2].(pagination.Page))
	})
	return _c
}

func (_c *MockPlaybackProgressRepository_ListByUser_Call) Return(progressList []*domain.PlaybackProgress, total int, err error) *MockPlaybackProgressRepository_ListByUser_Call {
	_c.Call.Return(progressList, total, err)
	return _c
}

func (_c *MockPlaybackProgressRepository_ListByUser_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID, page pagination.Page) ([]*domain.PlaybackProgress, int, error)) *MockPlaybackProgressRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type MockPlaybackProgressRepository
func (_mock *MockPlaybackProgressRepository) Upsert(ctx context.Context, progress *domain.PlaybackProgress) error {
	ret := _mock.Called(ctx, progress)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PlaybackProgress) error); ok {
		r0 = returnFunc(ctx, progress)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPlaybackProgressRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockPlaybackProgressRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx
//   - progress
func (_e *MockPlaybackProgressRepository_Expecter) Upsert(ctx interface{}, progress interface{}) *MockPlaybackProgressRepository_Upsert_Call {
	return &MockPlaybackProgressRepository_Upsert_Call{Call: _e.mock.On("Upsert", ctx, progress)}
}

func (_c *MockPlaybackProgressRepository_Upsert_Call) Run(run func(ctx context.Context, progress *domain.PlaybackProgress)) *MockPlaybackProgressRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PlaybackProgress))
	})
	return _c
}

func (_c *MockPlaybackProgressRepository_Upsert_Call) Return(err error) *MockPlaybackProgressRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPlaybackProgressRepository_Upsert_Call) RunAndReturn(run func(ctx context.Context, progress *domain.PlaybackProgress) error) *MockPlaybackProgressRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
