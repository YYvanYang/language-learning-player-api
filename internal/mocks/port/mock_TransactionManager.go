// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTransactionManager creates a new instance of MockTransactionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionManager {
	mock := &MockTransactionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionManager is an autogenerated mock type for the TransactionManager type
type MockTransactionManager struct {
	mock.Mock
}

type MockTransactionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionManager) EXPECT() *MockTransactionManager_Expecter {
	return &MockTransactionManager_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockTransactionManager
func (_mock *MockTransactionManager) Begin(ctx context.Context) (context.Context, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionManager_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockTransactionManager_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx
func (_e *MockTransactionManager_Expecter) Begin(ctx interface{}) *MockTransactionManager_Begin_Call {
	return &MockTransactionManager_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockTransactionManager_Begin_Call) Run(run func(ctx context.Context)) *MockTransactionManager_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTransactionManager_Begin_Call) Return(TxContext context.Context, err error) *MockTransactionManager_Begin_Call {
	_c.Call.Return(TxContext, err)
	return _c
}

func (_c *MockTransactionManager_Begin_Call) RunAndReturn(run func(ctx context.Context) (context.Context, error)) *MockTransactionManager_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockTransactionManager
func (_mock *MockTransactionManager) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionManager_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTransactionManager_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx
func (_e *MockTransactionManager_Expecter) Commit(ctx interface{}) *MockTransactionManager_Commit_Call {
	return &MockTransactionManager_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockTransactionManager_Commit_Call) Run(run func(ctx context.Context)) *MockTransactionManager_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTransactionManager_Commit_Call) Return(err error) *MockTransactionManager_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionManager_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *MockTransactionManager_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockTransactionManager
func (_mock *MockTransactionManager) Execute(ctx context.Context, fn func(txCtx context.Context) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(txCtx context.Context) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionManager_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTransactionManager_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx
//   - fn
func (_e *MockTransactionManager_Expecter) Execute(ctx interface{}, fn interface{}) *MockTransactionManager_Execute_Call {
	return &MockTransactionManager_Execute_Call{Call: _e.mock.On("Execute", ctx, fn)}
}

func (_c *MockTransactionManager_Execute_Call) Run(run func(ctx context.Context, fn func(txCtx context.Context) error)) *MockTransactionManager_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(txCtx context.Context) error))
	})
	return _c
}

func (_c *MockTransactionManager_Execute_Call) Return(err error) *MockTransactionManager_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionManager_Execute_Call) RunAndReturn(run func(ctx context.Context, fn func(txCtx context.Context) error) error) *MockTransactionManager_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockTransactionManager
func (_mock *MockTransactionManager) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionManager_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTransactionManager_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx
func (_e *MockTransactionManager_Expecter) Rollback(ctx interface{}) *MockTransactionManager_Rollback_Call {
	return &MockTransactionManager_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockTransactionManager_Rollback_Call) Run(run func(ctx context.Context)) *MockTransactionManager_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTransactionManager_Rollback_Call) Return(err error) *MockTransactionManager_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionManager_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *MockTransactionManager_Rollback_Call {
	_c.Call.Return(run)
	return _c
}
