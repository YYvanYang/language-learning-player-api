// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/yvanyang/language-learning-player-api/internal/domain"
)

// NewMockUserUseCase creates a new instance of MockUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUseCase {
	mock := &MockUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserUseCase is an autogenerated mock type for the UserUseCase type
type MockUserUseCase struct {
	mock.Mock
}

type MockUserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUseCase) EXPECT() *MockUserUseCase_Expecter {
	return &MockUserUseCase_Expecter{mock: &_m.Mock}
}

// GetUserProfile provides a mock function for the type MockUserUseCase
func (_mock *MockUserUseCase) GetUserProfile(ctx context.Context, userID domain.UserID) (*domain.User, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) (*domain.User, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) *domain.User); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUseCase_GetUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfile'
type MockUserUseCase_GetUserProfile_Call struct {
	*mock.Call
}

// GetUserProfile is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockUserUseCase_Expecter) GetUserProfile(ctx interface{}, userID interface{}) *MockUserUseCase_GetUserProfile_Call {
	return &MockUserUseCase_GetUserProfile_Call{Call: _e.mock.On("GetUserProfile", ctx, userID)}
}

func (_c *MockUserUseCase_GetUserProfile_Call) Run(run func(ctx context.Context, userID domain.UserID)) *MockUserUseCase_GetUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserID))
	})
	return _c
}

func (_c *MockUserUseCase_GetUserProfile_Call) Return(user *domain.User, err error) *MockUserUseCase_GetUserProfile_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserUseCase_GetUserProfile_Call) RunAndReturn(run func(ctx context.Context, userID domain.UserID) (*domain.User, error)) *MockUserUseCase_GetUserProfile_Call {
	_c.Call.Return(run)
	return _c
}
