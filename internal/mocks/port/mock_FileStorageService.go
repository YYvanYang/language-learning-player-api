// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFileStorageService creates a new instance of MockFileStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileStorageService {
	mock := &MockFileStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileStorageService is an autogenerated mock type for the FileStorageService type
type MockFileStorageService struct {
	mock.Mock
}

type MockFileStorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileStorageService) EXPECT() *MockFileStorageService_Expecter {
	return &MockFileStorageService_Expecter{mock: &_m.Mock}
}

// DeleteObject provides a mock function for the type MockFileStorageService
func (_mock *MockFileStorageService) DeleteObject(ctx context.Context, bucket string, objectKey string) error {
	ret := _mock.Called(ctx, bucket, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, bucket, objectKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileStorageService_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockFileStorageService_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - objectKey
func (_e *MockFileStorageService_Expecter) DeleteObject(ctx interface{}, bucket interface{}, objectKey interface{}) *MockFileStorageService_DeleteObject_Call {
	return &MockFileStorageService_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, bucket, objectKey)}
}

func (_c *MockFileStorageService_DeleteObject_Call) Run(run func(ctx context.Context, bucket string, objectKey string)) *MockFileStorageService_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFileStorageService_DeleteObject_Call) Return(err error) *MockFileStorageService_DeleteObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileStorageService_DeleteObject_Call) RunAndReturn(run func(ctx context.Context, bucket string, objectKey string) error) *MockFileStorageService_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignedGetURL provides a mock function for the type MockFileStorageService
func (_mock *MockFileStorageService) GetPresignedGetURL(ctx context.Context, bucket string, objectKey string, expiry time.Duration) (string, error) {
	ret := _mock.Called(ctx, bucket, objectKey, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedGetURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (string, error)); ok {
		return returnFunc(ctx, bucket, objectKey, expiry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) string); ok {
		r0 = returnFunc(ctx, bucket, objectKey, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, bucket, objectKey, expiry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileStorageService_GetPresignedGetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignedGetURL'
type MockFileStorageService_GetPresignedGetURL_Call struct {
	*mock.Call
}

// GetPresignedGetURL is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - objectKey
//   - expiry
func (_e *MockFileStorageService_Expecter) GetPresignedGetURL(ctx interface{}, bucket interface{}, objectKey interface{}, expiry interface{}) *MockFileStorageService_GetPresignedGetURL_Call {
	return &MockFileStorageService_GetPresignedGetURL_Call{Call: _e.mock.On("GetPresignedGetURL", ctx, bucket, objectKey, expiry)}
}

func (_c *MockFileStorageService_GetPresignedGetURL_Call) Run(run func(ctx context.Context, bucket string, objectKey string, expiry time.Duration)) *MockFileStorageService_GetPresignedGetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockFileStorageService_GetPresignedGetURL_Call) Return(s string, err error) *MockFileStorageService_GetPresignedGetURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileStorageService_GetPresignedGetURL_Call) RunAndReturn(run func(ctx context.Context, bucket string, objectKey string, expiry time.Duration) (string, error)) *MockFileStorageService_GetPresignedGetURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignedPutURL provides a mock function for the type MockFileStorageService
func (_mock *MockFileStorageService) GetPresignedPutURL(ctx context.Context, bucket string, objectKey string, expiry time.Duration) (string, error) {
	ret := _mock.Called(ctx, bucket, objectKey, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedPutURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (string, error)); ok {
		return returnFunc(ctx, bucket, objectKey, expiry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) string); ok {
		r0 = returnFunc(ctx, bucket, objectKey, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, bucket, objectKey, expiry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileStorageService_GetPresignedPutURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignedPutURL'
type MockFileStorageService_GetPresignedPutURL_Call struct {
	*mock.Call
}

// GetPresignedPutURL is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - objectKey
//   - expiry
func (_e *MockFileStorageService_Expecter) GetPresignedPutURL(ctx interface{}, bucket interface{}, objectKey interface{}, expiry interface{}) *MockFileStorageService_GetPresignedPutURL_Call {
	return &MockFileStorageService_GetPresignedPutURL_Call{Call: _e.mock.On("GetPresignedPutURL", ctx, bucket, objectKey, expiry)}
}

func (_c *MockFileStorageService_GetPresignedPutURL_Call) Run(run func(ctx context.Context, bucket string, objectKey string, expiry time.Duration)) *MockFileStorageService_GetPresignedPutURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockFileStorageService_GetPresignedPutURL_Call) Return(s string, err error) *MockFileStorageService_GetPresignedPutURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileStorageService_GetPresignedPutURL_Call) RunAndReturn(run func(ctx context.Context, bucket string, objectKey string, expiry time.Duration) (string, error)) *MockFileStorageService_GetPresignedPutURL_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectExists provides a mock function for the type MockFileStorageService
func (_mock *MockFileStorageService) ObjectExists(ctx context.Context, bucket string, objectKey string) (bool, error) {
	ret := _mock.Called(ctx, bucket, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for ObjectExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, bucket, objectKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, bucket, objectKey)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucket, objectKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileStorageService_ObjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectExists'
type MockFileStorageService_ObjectExists_Call struct {
	*mock.Call
}

// ObjectExists is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - objectKey
func (_e *MockFileStorageService_Expecter) ObjectExists(ctx interface{}, bucket interface{}, objectKey interface{}) *MockFileStorageService_ObjectExists_Call {
	return &MockFileStorageService_ObjectExists_Call{Call: _e.mock.On("ObjectExists", ctx, bucket, objectKey)}
}

func (_c *MockFileStorageService_ObjectExists_Call) Run(run func(ctx context.Context, bucket string, objectKey string)) *MockFileStorageService_ObjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFileStorageService_ObjectExists_Call) Return(b bool, err error) *MockFileStorageService_ObjectExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFileStorageService_ObjectExists_Call) RunAndReturn(run func(ctx context.Context, bucket string, objectKey string) (bool, error)) *MockFileStorageService_ObjectExists_Call {
	_c.Call.Return(run)
	return _c
}
